
<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:cc="http://creativecommons.org/ns#"
     xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
     xmlns:svg="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     version='1.1'
     baseProfile='full'
     width='1110.000'
     height='1364.000'>
    <defs>
        <style><![CDATA[
            line
            {
              stroke: black;
            }
            line.separator
            {
              stroke:       black;
              stroke-width: 1;
            }
            marker
            {
              fill: white;
            }
            path
            {
              fill:   white;
              stroke: black;
            }
            path.implementation
            {
              fill:             none;
              stroke-dasharray: 5,5;
              stroke-width:     3;
            }
            path.inheritance
            {
              fill:         none;
              stroke-width: 3;
            }
            rect
            {
              fill:         none;
              stroke:       black;
              stroke-width: 2;
            }
            rect.externalClass
            {
              fill:         #D0D0D0;
              fill-opacity: 0.8;
            }
            rect.focusClass
            {
              fill:         #FFFFF9;
              fill-opacity: 0.8;
            }
            rect.otherClass
            {
              fill:         #F0E68C;
              fill-opacity: 0.8;
            }
            rect.template
            {
              fill:             #FFFFFF;
              fill-opacity:     1.0;
              stroke-dasharray: 3,3;
            }
            text
            {
              font-family: monospace;
              font-size:   10px;
              font-weight: bold;
            }
            text.abstract
            {
              font-style: italic;
            }
            text.final
            {
              text-decoration: underline;
            }
            text.static
            {
              font-weight: normal;
            }
            text.stereotype
            {
              font-size:   8px;
              font-weight: normal;
            }
            ]]></style>
        <marker id='inheritance'
                viewBox='0,0,40,40'
                markerUnits='strokeWidth'
                refX='40'
                refY='20'
                markerWidth='6'
                markerHeight='6'
                orient='auto'>
            <path d='M40,20 l-40,-20 v40 Z'
                  fill='#ffffff'
                  stroke='#000000'
                  stroke-width='3'/>
        </marker>
        <marker id='implementation'
                viewBox='0,0,40,40'
                markerUnits='strokeWidth'
                refX='40'
                refY='20'
                markerWidth='6'
                markerHeight='6'
                orient='auto'>
            <path d='M40,20 l-40,-20 v40 Z'
                  fill='#ffffff'
                  stroke='#000000'
                  stroke-width='3'/>
        </marker>
        <clipPath id='ID000001'>
            <rect class='focusClass'
                  height='942.000'
                  width='1060.000'
                  x='0.000'
                  y='0.000'/>
        </clipPath>
        <symbol id='org.tquadrat.foundation.util.StringUtils'>
            <g>
                <g class='focusClass'
                   clip-path='url(#ID000001)'>
                    <rect x='0.000'
                          y='0.000'
                          width='1060.000'
                          height='942.000'
                          class='focusClass'/>
                    <line x1='0.000'
                          y1='17.000'
                          x2='1060.000'
                          y2='17.000'
                          class='separator'/>
                    <text x='497.000'
                          y='13.000'>StringUtils</text>
                    <line x1='0.000'
                          y1='133.000'
                          x2='1060.000'
                          y2='133.000'
                          class='separator'/>
                    <text y='30.000'
                          class='static final'>+ COMMENTREMOVAL_PATTERN:java.lang.String</text>
                    <text y='41.000'
                          class='static final'>+ FORMAT_INITIAL_BUFFERSIZE:int</text>
                    <text y='52.000'
                          class='static final'>- MSG_AbbrTooShort:java.lang.String</text>
                    <text y='63.000'
                          class='static final'>- MSG_PadNegative:java.lang.String</text>
                    <text y='74.000'
                          class='static final'>- PAD_LIMIT:int</text>
                    <text y='85.000'
                          class='static final'>+ TAGREMOVAL_PATTERN:java.lang.String</text>
                    <text y='96.000'
                          class='static final'>+ VARIABLE_PATTERN:java.lang.String</text>
                    <text y='107.000'
                          class='static final'>+ VARIABLE_TEMPLATE:java.lang.String</text>
                    <text y='118.000'
                          class='static final'>- m_CommentRemovalPattern:java.util.regex.Pattern</text>
                    <text y='129.000'
                          class='static final'>- m_TagRemovalPattern:java.util.regex.Pattern</text>
                    <text x='5.000'
                          y='146.000'>- StringUtils()</text>
                    <text x='5.000'
                          y='157.000'
                          class='static'>+ abbreviate(text:java.lang.CharSequence,maxWidth:int):java.lang.String</text>
                    <text x='5.000'
                          y='168.000'
                          class='static'>+ abbreviate(text:java.lang.CharSequence,offset:int,maxWidth:int):java.lang.String</text>
                    <text x='5.000'
                          y='179.000'
                          class='static'>+ abbreviateMiddle(str:java.lang.CharSequence,maxWidth:int):java.lang.String</text>
                    <text x='5.000'
                          y='190.000'
                          class='static'>+ breakString(s:java.lang.CharSequence,chunk:int):java.util.stream.Stream&lt;java.lang.String&gt;</text>
                    <text x='5.000'
                          y='201.000'
                          class='static'>+ breakText(text:java.lang.CharSequence,lineLength:int):java.util.stream.Stream&lt;java.lang.String&gt;</text>
                    <text x='5.000'
                          y='212.000'
                          class='static'>+ capitalize(c:java.lang.CharSequence):java.lang.String</text>
                    <text x='5.000'
                          y='223.000'
                          class='static'>+ checkText(name:java.lang.String,text:java.lang.CharSequence,maxLength:int):java.lang.String</text>
                    <text x='5.000'
                          y='234.000'
                          class='static'>+ checkTextLen(name:java.lang.String,text:java.lang.CharSequence,maxLength:int):java.lang.String</text>
                    <text x='5.000'
                          y='245.000'
                          class='static'>+ checkTextLenNull(name:java.lang.String,text:java.lang.CharSequence,maxLength:int):java.lang.String</text>
                    <text x='5.000'
                          y='256.000'
                          class='static'>+ checkTextNull(name:java.lang.String,text:java.lang.CharSequence,maxLength:int):java.lang.String</text>
                    <text x='5.000'
                          y='267.000'
                          class='static'>+ decapitalize(s:java.lang.CharSequence):java.lang.String</text>
                    <text x='5.000'
                          y='278.000'
                          class='static'>+ escapeHTML(str:java.lang.CharSequence):java.lang.String</text>
                    <text x='5.000'
                          y='289.000'
                          class='static'>+ escapeHTML(appendable:java.lang.Appendable,str:java.lang.CharSequence):void</text>
                    <text x='5.000'
                          y='300.000'
                          class='static'>+ escapeJSON(str:java.lang.CharSequence):java.lang.String</text>
                    <text x='5.000'
                          y='311.000'
                          class='static'>+ escapeRegex(appendable:java.lang.Appendable,c:char):void</text>
                    <text x='5.000'
                          y='322.000'
                          class='static'>+ escapeRegex(c:char):java.lang.String</text>
                    <text x='5.000'
                          y='333.000'
                          class='static'>+ escapeRegex(str:java.lang.CharSequence):java.lang.String</text>
                    <text x='5.000'
                          y='344.000'
                          class='static'>+ escapeRegex(appendable:java.lang.Appendable,str:java.lang.CharSequence):void</text>
                    <text x='5.000'
                          y='355.000'
                          class='static'>+ escapeUnicode(c:char):java.lang.String</text>
                    <text x='5.000'
                          y='366.000'
                          class='static'>+ escapeUnicode(codePoint:int):java.lang.String</text>
                    <text x='5.000'
                          y='377.000'
                          class='static'>+ escapeXML(str:java.lang.CharSequence):java.lang.String</text>
                    <text x='5.000'
                          y='388.000'
                          class='static'>+ escapeXML(appendable:java.lang.Appendable,str:java.lang.CharSequence):void</text>
                    <text x='5.000'
                          y='399.000'
                          class='static'>+ findVariables(text:java.lang.CharSequence):java.util.Collection&lt;java.lang.String&gt;</text>
                    <text x='5.000'
                          y='410.000'
                          class='static'>+ format(format:java.lang.String,args:java.lang.Object&#x2026;):java.lang.String</text>
                    <text x='5.000'
                          y='421.000'
                          class='static'>+ format(locale:java.util.Locale,format:java.lang.String,args:java.lang.Object&#x2026;):java.lang.String</text>
                    <text x='5.000'
                          y='432.000'
                          class='static'>+ hasVariable(s:java.lang.CharSequence):boolean</text>
                    <text x='5.000'
                          y='443.000'
                          class='static'>+ isEmpty(s:java.lang.CharSequence):boolean</text>
                    <text x='5.000'
                          y='454.000'
                          class='static'>+ isEmptyOrBlank(s:java.lang.CharSequence):boolean</text>
                    <text x='5.000'
                          y='465.000'
                          class='static'>+ isNotEmpty(s:java.lang.CharSequence):boolean</text>
                    <text x='5.000'
                          y='476.000'
                          class='static'>+ isNotEmptyOrBlank(s:java.lang.CharSequence):boolean</text>
                    <text x='5.000'
                          y='487.000'
                          class='static'>+ isValidVariableName(name:java.lang.CharSequence):boolean</text>
                    <text x='5.000'
                          y='498.000'
                          class='static'>+ isVariable(s:java.lang.CharSequence):boolean</text>
                    <text x='5.000'
                          y='509.000'
                          class='static'>+ joinString(s:java.lang.CharSequence[],separator:java.lang.CharSequence):java.lang.String</text>
                    <text x='5.000'
                          y='520.000'
                          class='static'>+ joinString(s:java.util.Collection&lt;? extends java.lang.CharSequence&gt;,separator:java.lang.CharSequence):java.lang.String</text>
                    <text x='5.000'
                          y='531.000'
                          class='static'>+ joinString(s:java.util.stream.Stream&lt;? extends java.lang.CharSequence&gt;,separator:java.lang.CharSequence):java.lang.String</text>
                    <text x='5.000'
                          y='542.000'
                          class='static'>+ joinString(s:java.lang.CharSequence[],separator:char):java.lang.String</text>
                    <text x='5.000'
                          y='553.000'
                          class='static'>+ joinString(s:java.lang.Iterable&lt;? extends java.lang.CharSequence&gt;,separator:char):java.lang.String</text>
                    <text x='5.000'
                          y='564.000'
                          class='static'>+ maxContentLength(list:java.lang.Iterable&lt;? extends java.lang.CharSequence&gt;):int</text>
                    <text x='5.000'
                          y='575.000'
                          class='static'>+ maxContentLength(stream:java.util.stream.Stream&lt;? extends java.lang.CharSequence&gt;):int</text>
                    <text x='5.000'
                          y='586.000'
                          class='static'>+ maxContentLength(list:java.util.Collection&lt;? extends java.lang.CharSequence&gt;):int</text>
                    <text x='5.000'
                          y='597.000'
                          class='static'>+ maxContentLength(a:java.lang.CharSequence&#x2026;):int</text>
                    <text x='5.000'
                          y='608.000'
                          class='static'>+ pad(s:java.lang.CharSequence,length:int,c:char,mode:org.tquadrat.foundation.util.StringUtils.Padding,clip:boolean):java.lang.String</text>
                    <text x='5.000'
                          y='619.000'
                          class='static'>+ pad(s:java.lang.CharSequence,length:int,c:char,mode:org.tquadrat.foundation.util.StringUtils.Padding,clip:org.tquadrat.foundation.util.StringUtils.Clipping):java.lang.String</text>
                    <text x='5.000'
                          y='630.000'
                          class='static'>+ padCenter(s:java.lang.CharSequence,length:int):java.lang.String</text>
                    <text x='5.000'
                          y='641.000'
                          class='static'>+ padLeft(s:java.lang.CharSequence,length:int):java.lang.String</text>
                    <text x='5.000'
                          y='652.000'
                          class='static'>+ padRight(s:java.lang.CharSequence,length:int):java.lang.String</text>
                    <text x='5.000'
                          y='663.000'
                          class='static'>+ repeat(c:char,repeat:int):java.lang.String</text>
                    <text x='5.000'
                          y='674.000'
                          class='static'>+ repeat(codePoint:int,repeat:int):java.lang.String</text>
                    <text x='5.000'
                          y='685.000'
                          class='static'>+ repeat(s:java.lang.CharSequence,repeat:int):java.lang.String</text>
                    <text x='5.000'
                          y='696.000'
                          class='static'>+ replaceVariable(text:java.lang.CharSequence,sources:java.util.Map&lt;java.lang.String,? extends java.lang.Object&gt;&#x2026;):java.lang.String</text>
                    <text x='5.000'
                          y='707.000'
                          class='static'>+ replaceVariable(text:java.lang.CharSequence,retriever:java.util.function.Function&lt;? super java.lang.String,java.util.Optional&lt;java.lang.String&gt;&gt;):java.lang.String</text>
                    <text x='5.000'
                          y='718.000'
                          class='static'>+ splitString(string:java.lang.CharSequence,separator:char):java.lang.String[]</text>
                    <text x='5.000'
                          y='729.000'
                          class='static'>+ splitString(string:java.lang.CharSequence,separator:int):java.lang.String[]</text>
                    <text x='5.000'
                          y='740.000'
                          class='static'>+ splitString(string:java.lang.CharSequence,separator:java.lang.CharSequence):java.lang.String[]</text>
                    <text x='5.000'
                          y='751.000'
                          class='static'>+ stream(string:java.lang.CharSequence,separator:char):java.util.stream.Stream&lt;java.lang.String&gt;</text>
                    <text x='5.000'
                          y='762.000'
                          class='static'>+ stream(string:java.lang.CharSequence,separator:int):java.util.stream.Stream&lt;java.lang.String&gt;</text>
                    <text x='5.000'
                          y='773.000'
                          class='static'>+ stream(string:java.lang.CharSequence,separator:java.lang.CharSequence):java.util.stream.Stream&lt;java.lang.String&gt;</text>
                    <text x='5.000'
                          y='784.000'
                          class='static'>+ stream(string:java.lang.CharSequence,pattern:java.util.regex.Pattern):java.util.stream.Stream&lt;java.lang.String&gt;</text>
                    <text x='5.000'
                          y='795.000'
                          class='static'>+ stripTags(s:java.lang.CharSequence):java.lang.String</text>
                    <text x='5.000'
                          y='806.000'
                          class='static'>+ stripToFilename(s:java.lang.CharSequence):java.lang.String</text>
                    <text x='5.000'
                          y='817.000'
                          class='static'>+ stripXMLComments(s:java.lang.CharSequence):java.lang.String</text>
                    <text x='5.000'
                          y='828.000'
                          class='static'>+ toUnicode(s:java.lang.CharSequence):java.lang.String</text>
                    <text x='5.000'
                          y='839.000'
                          class='static'>+ uncapitalize(s:java.lang.CharSequence):java.lang.String</text>
                    <text x='5.000'
                          y='850.000'
                          class='static'>+ unescapeHTML(str:java.lang.CharSequence):java.lang.String</text>
                    <text x='5.000'
                          y='861.000'
                          class='static'>+ unescapeHTML(appendable:java.lang.Appendable,str:java.lang.CharSequence):void</text>
                    <text x='5.000'
                          y='872.000'
                          class='static'>+ unescapeUnicode(s:java.lang.CharSequence):java.lang.String</text>
                    <text x='5.000'
                          y='883.000'
                          class='static'>+ unescapeXML(str:java.lang.CharSequence):java.lang.String</text>
                    <text x='5.000'
                          y='894.000'
                          class='static'>+ unescapeXML(appendable:java.lang.Appendable,str:java.lang.CharSequence):void</text>
                    <text x='5.000'
                          y='905.000'
                          class='static'>+ unicodeEscape(c:char):java.lang.String</text>
                    <text x='5.000'
                          y='916.000'
                          class='static'>+ unicodeEscape(codePoint:int):java.lang.String</text>
                    <text x='5.000'
                          y='927.000'
                          class='static'>+ urlDecode(s:java.lang.CharSequence):java.lang.String</text>
                    <text x='5.000'
                          y='938.000'
                          class='static'>+ urlEncode(s:java.lang.CharSequence):java.lang.String</text>
                </g>
            </g>
        </symbol>
        <clipPath id='ID000002'>
            <rect class='externalClass'
                  height='172.000'
                  width='244.000'
                  x='0.000'
                  y='0.000'/>
        </clipPath>
        <symbol id='java.lang.Object'>
            <g>
                <g clip-path='url(#ID000002)'>
                    <rect x='0.000'
                          y='0.000'
                          width='244.000'
                          height='172.000'
                          class='externalClass'/>
                    <line x1='0.000'
                          y1='17.000'
                          x2='244.000'
                          y2='17.000'
                          class='separator'/>
                    <text x='104.000'
                          y='13.000'>Object</text>
                    <line x1='0.000'
                          y1='34.000'
                          x2='244.000'
                          y2='34.000'
                          class='separator'/>
                    <text x='5.000'
                          y='30.000'/>
                    <text x='5.000'
                          y='47.000'>+ Object()</text>
                    <text x='5.000'
                          y='58.000'>+ getClass():java.lang.Class&lt;?&gt;</text>
                    <text x='5.000'
                          y='69.000'>+ hashCode():int</text>
                    <text x='5.000'
                          y='80.000'>+ equals(arg0:java.lang.Object):boolean</text>
                    <text x='5.000'
                          y='91.000'># clone():java.lang.Object</text>
                    <text x='5.000'
                          y='102.000'>+ toString():java.lang.String</text>
                    <text x='5.000'
                          y='113.000'>+ notify():void</text>
                    <text x='5.000'
                          y='124.000'>+ notifyAll():void</text>
                    <text x='5.000'
                          y='135.000'>+ wait():void</text>
                    <text x='5.000'
                          y='146.000'>+ wait(arg0:long):void</text>
                    <text x='5.000'
                          y='157.000'>+ wait(arg0:long,arg1:int):void</text>
                    <text x='5.000'
                          y='168.000'># finalize():void</text>
                </g>
            </g>
        </symbol>
    </defs>
    <path class='inheritance'
          d='M555.000,297.000 L555.000,197.000'
          marker-end='url(#inheritance)'/>
    <use x='433.000'
         y='25.000'
         xlink:href='#java.lang.Object'/>
    <use x='25.000'
         y='297.000'
         xlink:href='#org.tquadrat.foundation.util.StringUtils'/>
</svg>